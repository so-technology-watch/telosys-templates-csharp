//
// C# class for entity "${entity.name}" 
// Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
// Generated by $generator.name ( version $generator.version )
//
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Web;

$env.setLanguage('C#')
## // Language : $env.getLanguage() $env.language
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )


namespace ${SOLUTION_NAMESPACE}.Models
{
	public class ${entity.name}
	{
		//--- KEY ATTRIBUTE 
#foreach( $attribute in $entity.keyAttributes )
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.None)]
		public ${attribute.formattedType(0)} ${attribute.formattedName(0)} { get; set; } // Id or Primary Key
#end

		//--- DATA (NOT KEY and NOT LINK) ATTRIBUTES 
## #foreach( $attribute in $entity.nonKeyAttributes )
#foreach( $attribute in $dataFields )
		public ${attribute.formattedType(0)} ${attribute.formattedName(0)} { get; set; } 
#end


		//--- LINKS ATTRIBUTES 
#foreach( $link in $entity.selectedLinks )

#if( ${link.formattedFieldType(0)} == ${link.formattedFieldName(0)})
		[ForeignKey("${link.formattedFieldType(0)}")]
		public string ${link.formattedFieldName(0)}Id { get; set; }
		public virtual ${link.formattedFieldType(0)} ${link.formattedFieldName(0)} { get; set; }
#else
#set($test = "${link.formattedFieldType(0)}s")
#foreach( $attribute in $entity.nonKeyAttributes)
#if( ${attribute.formattedName(0)} ==  $test)
		public virtual ${test}Collection ${attribute.formattedName(0)} { get; set; }
#end ##fin du if
#end ##fin du foreach
#end ##fin du else
#end ##fin du foreach
		
		public ${entity.name}()
		{

		}

		public override string ToString()
		{
			return string.Empty + #foreach( $attribute in $dataFields ) #if(${dataFields.size()} == $foreach.count)${attribute.formattedName(0)} #else ${attribute.formattedName(0)} + " " + #end#end;		
		
		}
	}


##Méthode d'extensions dans le cas où l'entité possède une propriété de type collection
#foreach( $link in $entity.selectedLinks )
#if( ${link.formattedFieldType(0)} != ${link.formattedFieldName(0)})
#set($test = "${link.formattedFieldType(0)}s")
#foreach( $attribute in $entity.nonKeyAttributes)
#if( ${attribute.formattedName(0)} ==  $test)
	public class ${test}Collection : List<${link.formattedFieldType(0)}>
	{
		public override string ToString()
		{
			return this.Aggregate(string.Empty, (current, ${fn.uncapitalize($link.formattedFieldType(0))}) => current + ${fn.uncapitalize($link.formattedFieldType(0))}.ToString() + "; "); 
		}
	}
#end ##fin du if
#end ##fin du foreach
#end ##fin du if
#end ##fin du foreach

}
